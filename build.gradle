buildscript {
    ext {
        jooqVersion = '3.20.0'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'nu.studer.jooq' version '10.1'
}

group = 'boot'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation('org.springframework.boot:spring-boot-starter-jooq') {
        exclude group: 'org.jooq:jooq'
    }
    implementation "org.jooq:jooq:${jooqVersion}"

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql:42.7.5'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    jooqGenerator project(":jooq-sub")
    jooqGenerator "org.jooq:jooq:${jooqVersion}"
    jooqGenerator "org.jooq:jooq-meta:${jooqVersion}"
}

test {
    useJUnitPlatform()
}

String dbUser = System.properties["db-user"] ?: "postgres"
String dbPasswd = System.properties["db-passwd"] ?: "1234"

jooq {
    version = jooqVersion
    configurations {
        main {
            generationTool {
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = 'jdbc:postgresql://localhost:5432/sakila'
                    user = "${dbUser}"
                    password = "${dbPasswd}"
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        schemata {
                            schema {
                                inputSchema = 'public'
                            }
                        }
                    }
                    generate {
                        daos = true
                        records = true
                        fluentSetters = true
                        javaTimeTypes = true
                        deprecated = false
                    }
                    target {
                        directory = 'src/generated'
                    }
                    strategy['name'] = 'jooq.custom.generator.JPrefixGeneratorStrategy'
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "src/generated"]
        }
    }
}